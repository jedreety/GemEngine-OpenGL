// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NETWORKMESSAGE_NETWORKING_H_
#define FLATBUFFERS_GENERATED_NETWORKMESSAGE_NETWORKING_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Networking {

struct Vec3;

struct ClientIDMessage;
struct ClientIDMessageBuilder;

struct PositionUpdateMessage;
struct PositionUpdateMessageBuilder;

struct ChatMessage;
struct ChatMessageBuilder;

struct PingMessage;
struct PingMessageBuilder;

struct PongMessage;
struct PongMessageBuilder;

struct Message;
struct MessageBuilder;

enum MessageType : int8_t {
  MessageType_NONE = 0,
  MessageType_ClientIDMessage = 1,
  MessageType_PositionUpdateMessage = 2,
  MessageType_ChatMessage = 3,
  MessageType_PingMessage = 4,
  MessageType_PongMessage = 5,
  MessageType_MIN = MessageType_NONE,
  MessageType_MAX = MessageType_PongMessage
};

inline const MessageType (&EnumValuesMessageType())[6] {
  static const MessageType values[] = {
    MessageType_NONE,
    MessageType_ClientIDMessage,
    MessageType_PositionUpdateMessage,
    MessageType_ChatMessage,
    MessageType_PingMessage,
    MessageType_PongMessage
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[7] = {
    "NONE",
    "ClientIDMessage",
    "PositionUpdateMessage",
    "ChatMessage",
    "PingMessage",
    "PongMessage",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (::flatbuffers::IsOutRange(e, MessageType_NONE, MessageType_PongMessage)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

enum MessageData : uint8_t {
  MessageData_NONE = 0,
  MessageData_ClientIDMessage = 1,
  MessageData_PositionUpdateMessage = 2,
  MessageData_ChatMessage = 3,
  MessageData_PingMessage = 4,
  MessageData_PongMessage = 5,
  MessageData_MIN = MessageData_NONE,
  MessageData_MAX = MessageData_PongMessage
};

inline const MessageData (&EnumValuesMessageData())[6] {
  static const MessageData values[] = {
    MessageData_NONE,
    MessageData_ClientIDMessage,
    MessageData_PositionUpdateMessage,
    MessageData_ChatMessage,
    MessageData_PingMessage,
    MessageData_PongMessage
  };
  return values;
}

inline const char * const *EnumNamesMessageData() {
  static const char * const names[7] = {
    "NONE",
    "ClientIDMessage",
    "PositionUpdateMessage",
    "ChatMessage",
    "PingMessage",
    "PongMessage",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageData(MessageData e) {
  if (::flatbuffers::IsOutRange(e, MessageData_NONE, MessageData_PongMessage)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageData()[index];
}

template<typename T> struct MessageDataTraits {
  static const MessageData enum_value = MessageData_NONE;
};

template<> struct MessageDataTraits<Networking::ClientIDMessage> {
  static const MessageData enum_value = MessageData_ClientIDMessage;
};

template<> struct MessageDataTraits<Networking::PositionUpdateMessage> {
  static const MessageData enum_value = MessageData_PositionUpdateMessage;
};

template<> struct MessageDataTraits<Networking::ChatMessage> {
  static const MessageData enum_value = MessageData_ChatMessage;
};

template<> struct MessageDataTraits<Networking::PingMessage> {
  static const MessageData enum_value = MessageData_PingMessage;
};

template<> struct MessageDataTraits<Networking::PongMessage> {
  static const MessageData enum_value = MessageData_PongMessage;
};

bool VerifyMessageData(::flatbuffers::Verifier &verifier, const void *obj, MessageData type);
bool VerifyMessageDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct ClientIDMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientIDMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENTID = 4
  };
  uint32_t clientID() const {
    return GetField<uint32_t>(VT_CLIENTID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CLIENTID, 4) &&
           verifier.EndTable();
  }
};

struct ClientIDMessageBuilder {
  typedef ClientIDMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_clientID(uint32_t clientID) {
    fbb_.AddElement<uint32_t>(ClientIDMessage::VT_CLIENTID, clientID, 0);
  }
  explicit ClientIDMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ClientIDMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ClientIDMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ClientIDMessage> CreateClientIDMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t clientID = 0) {
  ClientIDMessageBuilder builder_(_fbb);
  builder_.add_clientID(clientID);
  return builder_.Finish();
}

struct PositionUpdateMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PositionUpdateMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENTID = 4,
    VT_POSITION = 6
  };
  uint32_t clientID() const {
    return GetField<uint32_t>(VT_CLIENTID, 0);
  }
  const Networking::Vec3 *position() const {
    return GetStruct<const Networking::Vec3 *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CLIENTID, 4) &&
           VerifyField<Networking::Vec3>(verifier, VT_POSITION, 4) &&
           verifier.EndTable();
  }
};

struct PositionUpdateMessageBuilder {
  typedef PositionUpdateMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_clientID(uint32_t clientID) {
    fbb_.AddElement<uint32_t>(PositionUpdateMessage::VT_CLIENTID, clientID, 0);
  }
  void add_position(const Networking::Vec3 *position) {
    fbb_.AddStruct(PositionUpdateMessage::VT_POSITION, position);
  }
  explicit PositionUpdateMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PositionUpdateMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PositionUpdateMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PositionUpdateMessage> CreatePositionUpdateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t clientID = 0,
    const Networking::Vec3 *position = nullptr) {
  PositionUpdateMessageBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_clientID(clientID);
  return builder_.Finish();
}

struct ChatMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChatMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENDERID = 4,
    VT_MESSAGE = 6
  };
  uint32_t senderID() const {
    return GetField<uint32_t>(VT_SENDERID, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SENDERID, 4) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct ChatMessageBuilder {
  typedef ChatMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_senderID(uint32_t senderID) {
    fbb_.AddElement<uint32_t>(ChatMessage::VT_SENDERID, senderID, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(ChatMessage::VT_MESSAGE, message);
  }
  explicit ChatMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ChatMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ChatMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ChatMessage> CreateChatMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t senderID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  ChatMessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_senderID(senderID);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ChatMessage> CreateChatMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t senderID = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return Networking::CreateChatMessage(
      _fbb,
      senderID,
      message__);
}

struct PingMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PingMessageBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PingMessageBuilder {
  typedef PingMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit PingMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PingMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PingMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PingMessage> CreatePingMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  PingMessageBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PongMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PongMessageBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PongMessageBuilder {
  typedef PongMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit PongMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PongMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PongMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PongMessage> CreatePongMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  PongMessageBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  Networking::MessageType type() const {
    return static_cast<Networking::MessageType>(GetField<int8_t>(VT_TYPE, 0));
  }
  Networking::MessageData data_type() const {
    return static_cast<Networking::MessageData>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const Networking::ClientIDMessage *data_as_ClientIDMessage() const {
    return data_type() == Networking::MessageData_ClientIDMessage ? static_cast<const Networking::ClientIDMessage *>(data()) : nullptr;
  }
  const Networking::PositionUpdateMessage *data_as_PositionUpdateMessage() const {
    return data_type() == Networking::MessageData_PositionUpdateMessage ? static_cast<const Networking::PositionUpdateMessage *>(data()) : nullptr;
  }
  const Networking::ChatMessage *data_as_ChatMessage() const {
    return data_type() == Networking::MessageData_ChatMessage ? static_cast<const Networking::ChatMessage *>(data()) : nullptr;
  }
  const Networking::PingMessage *data_as_PingMessage() const {
    return data_type() == Networking::MessageData_PingMessage ? static_cast<const Networking::PingMessage *>(data()) : nullptr;
  }
  const Networking::PongMessage *data_as_PongMessage() const {
    return data_type() == Networking::MessageData_PongMessage ? static_cast<const Networking::PongMessage *>(data()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyMessageData(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Networking::ClientIDMessage *Message::data_as<Networking::ClientIDMessage>() const {
  return data_as_ClientIDMessage();
}

template<> inline const Networking::PositionUpdateMessage *Message::data_as<Networking::PositionUpdateMessage>() const {
  return data_as_PositionUpdateMessage();
}

template<> inline const Networking::ChatMessage *Message::data_as<Networking::ChatMessage>() const {
  return data_as_ChatMessage();
}

template<> inline const Networking::PingMessage *Message::data_as<Networking::PingMessage>() const {
  return data_as_PingMessage();
}

template<> inline const Networking::PongMessage *Message::data_as<Networking::PongMessage>() const {
  return data_as_PongMessage();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(Networking::MessageType type) {
    fbb_.AddElement<int8_t>(Message::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_data_type(Networking::MessageData data_type) {
    fbb_.AddElement<uint8_t>(Message::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Message::VT_DATA, data);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Networking::MessageType type = Networking::MessageType_NONE,
    Networking::MessageData data_type = Networking::MessageData_NONE,
    ::flatbuffers::Offset<void> data = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyMessageData(::flatbuffers::Verifier &verifier, const void *obj, MessageData type) {
  switch (type) {
    case MessageData_NONE: {
      return true;
    }
    case MessageData_ClientIDMessage: {
      auto ptr = reinterpret_cast<const Networking::ClientIDMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageData_PositionUpdateMessage: {
      auto ptr = reinterpret_cast<const Networking::PositionUpdateMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageData_ChatMessage: {
      auto ptr = reinterpret_cast<const Networking::ChatMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageData_PingMessage: {
      auto ptr = reinterpret_cast<const Networking::PingMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageData_PongMessage: {
      auto ptr = reinterpret_cast<const Networking::PongMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageData(
        verifier,  values->Get(i), types->GetEnum<MessageData>(i))) {
      return false;
    }
  }
  return true;
}

inline const Networking::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<Networking::Message>(buf);
}

inline const Networking::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Networking::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Networking::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Networking::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Networking::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Networking::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Networking

#endif  // FLATBUFFERS_GENERATED_NETWORKMESSAGE_NETWORKING_H_
